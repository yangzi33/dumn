{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DUMN: Interactive Graph Generator Demo: https://dumn.herokuapp.com Getting Started Installation To use the API, add the following to your HTML header: <script defer type=\"text/javascript\" src=\"https://dumn.herokuapp.com/dumn.js\"></script> Usage To use the API, you need to create a canvas element with a unique ID. You will be generating all the graphs on your own canvas element. An example: <canvas id=\"myCanvas\"></canvas> In your script file, you can pass the following options to the API and generate a graph: networkSize : size of the graph you want to generate. Here the size refers to the number of nodes. nodeSize : size of each node within your graph. canvasId : id of the canvas element. In the example above, the id is myCanvas . color : the graph will be generated in this color. The color can be either names (e.g. black , red ) or HEX code (e.g. #F0F0F0 ). If you enter an invalid color or not entering color at all, the graph will be generated in black by default. After the options are all set, generate the graph by calling nnGenerator(options) . An example usage: // An example option options = {\"networkSize\": 10, \"nodeSize\": 50, \"canvasId\": \"myCanvas\", \"color\": \"black\"} nnGenerator(options) Adding Edges To add edges to the graph, * edges : the edges within the graph. For example, to include edges (1, 3) and (2, 3), the edges will be edges = [ { v1: 1, v2: 3 }, { v1: 2, v2: 3 } ] where v1 and v2 are the labels of nodes (see demo for example of node labelling). In your own canvas\uff0cyou will be able to drag the nodes around using mouse (see demo for an interactive use). Additionally, the generated graph can be directly saved as an image file. Sample Usage Here is an example of the generated graph using the example from above: Running Demo Locally To run demo locally, run the following commands: $ npm install $ node server.js Project layout dumn-docs/ # The documentations. pub/ pages/ ... # The demo files dumn.js # The main API package.json # Dependencies ... # Other files API Options options to initialize a nnGenerator Object Property Type Description networkSize Integer The number of nodes in graph, i.e. the size of generated graph. nodeSize Integer Size of the nodes in graph. canvasId String Element id of canvas used to generate graph. color String Color of nodes. Has to be property of CSS (HEX code or color name). Events After user generates a graph, user can drag the nodes to any position within the canvas. User may add edges between graph nodes by enterring node labels. Note: looping (a node connecting itself) is not supported. Methods Methods to control a nnGenerator object Name Parameters Description addNode None Increase the size of the graph by adding one node. addEdge Object{v1: integer, v2: integer} Connects nodes v1 and v2 with an edge. removeEdge Object{v1: integer, v2: integer} Remove edge connecting v1 and v2. draw None Draw the generated graph on canvas. select x: float, y: float Point object at position (x, y) by pointer selected . dragUp Event Handles mouse button release. dragOut Event Handles mouse leaving canvas. dragMove Event Handles mouse dragging within canvas. dragDown Event Handles mouse clicking canvas. setDrag None Handles all mouse events (dragUp, dragOut, dragMove, dragDown). getRandomCoor max: Integer Generates a random float from range (0, max). Used to generate nodes at random positions.","title":"DUMN: Interactive Graph Generator"},{"location":"#dumn-interactive-graph-generator","text":"Demo: https://dumn.herokuapp.com","title":"DUMN: Interactive Graph Generator"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#installation","text":"To use the API, add the following to your HTML header: <script defer type=\"text/javascript\" src=\"https://dumn.herokuapp.com/dumn.js\"></script>","title":"Installation"},{"location":"#usage","text":"To use the API, you need to create a canvas element with a unique ID. You will be generating all the graphs on your own canvas element. An example: <canvas id=\"myCanvas\"></canvas> In your script file, you can pass the following options to the API and generate a graph: networkSize : size of the graph you want to generate. Here the size refers to the number of nodes. nodeSize : size of each node within your graph. canvasId : id of the canvas element. In the example above, the id is myCanvas . color : the graph will be generated in this color. The color can be either names (e.g. black , red ) or HEX code (e.g. #F0F0F0 ). If you enter an invalid color or not entering color at all, the graph will be generated in black by default. After the options are all set, generate the graph by calling nnGenerator(options) . An example usage: // An example option options = {\"networkSize\": 10, \"nodeSize\": 50, \"canvasId\": \"myCanvas\", \"color\": \"black\"} nnGenerator(options)","title":"Usage"},{"location":"#adding-edges","text":"To add edges to the graph, * edges : the edges within the graph. For example, to include edges (1, 3) and (2, 3), the edges will be edges = [ { v1: 1, v2: 3 }, { v1: 2, v2: 3 } ] where v1 and v2 are the labels of nodes (see demo for example of node labelling). In your own canvas\uff0cyou will be able to drag the nodes around using mouse (see demo for an interactive use). Additionally, the generated graph can be directly saved as an image file.","title":"Adding Edges"},{"location":"#sample-usage","text":"Here is an example of the generated graph using the example from above:","title":"Sample Usage"},{"location":"#running-demo-locally","text":"To run demo locally, run the following commands: $ npm install $ node server.js","title":"Running Demo Locally"},{"location":"#project-layout","text":"dumn-docs/ # The documentations. pub/ pages/ ... # The demo files dumn.js # The main API package.json # Dependencies ... # Other files","title":"Project layout"},{"location":"#api","text":"","title":"API"},{"location":"#options","text":"options to initialize a nnGenerator Object Property Type Description networkSize Integer The number of nodes in graph, i.e. the size of generated graph. nodeSize Integer Size of the nodes in graph. canvasId String Element id of canvas used to generate graph. color String Color of nodes. Has to be property of CSS (HEX code or color name).","title":"Options"},{"location":"#events","text":"After user generates a graph, user can drag the nodes to any position within the canvas. User may add edges between graph nodes by enterring node labels. Note: looping (a node connecting itself) is not supported.","title":"Events"},{"location":"#methods","text":"Methods to control a nnGenerator object Name Parameters Description addNode None Increase the size of the graph by adding one node. addEdge Object{v1: integer, v2: integer} Connects nodes v1 and v2 with an edge. removeEdge Object{v1: integer, v2: integer} Remove edge connecting v1 and v2. draw None Draw the generated graph on canvas. select x: float, y: float Point object at position (x, y) by pointer selected . dragUp Event Handles mouse button release. dragOut Event Handles mouse leaving canvas. dragMove Event Handles mouse dragging within canvas. dragDown Event Handles mouse clicking canvas. setDrag None Handles all mouse events (dragUp, dragOut, dragMove, dragDown). getRandomCoor max: Integer Generates a random float from range (0, max). Used to generate nodes at random positions.","title":"Methods"},{"location":"API/","text":"API Docs nnGenerator API v1.0.0 Options options to initialize a nnGenerator Object Property Type Description networkSize Integer The number of nodes in graph, i.e. the size of generated graph. nodeSize Integer Size of the nodes in graph. canvasId String Element id of canvas used to generate graph. color String Color of nodes. Has to be property of CSS (HEX code or color name). Events After user generates a graph, user can drag the nodes to any position within the canvas. User may add edges between graph nodes by enterring node labels. Note: looping (a node connecting itself) is not supported. Methods Methods to control a nnGenerator object Name Parameters Description addNode None Increase the size of the graph by adding one node. addEdge Object{v1: integer, v2: integer} Connects nodes v1 and v2 with an edge. removeEdge Object{v1: integer, v2: integer} Remove edge connecting v1 and v2. draw None Draw the generated graph on canvas. select x: float, y: float Point object at position (x, y) by pointer selected . dragUp Event Handles mouse button release. dragOut Event Handles mouse leaving canvas. dragMove Event Handles mouse dragging within canvas. dragDown Event Handles mouse clicking canvas. setDrag None Handles all mouse events (dragUp, dragOut, dragMove, dragDown). getRandomCoor max: Integer Generates a random float from range (0, max). Used to generate nodes at random positions.","title":"API Docs"},{"location":"API/#api-docs","text":"nnGenerator API v1.0.0","title":"API Docs"},{"location":"API/#options","text":"options to initialize a nnGenerator Object Property Type Description networkSize Integer The number of nodes in graph, i.e. the size of generated graph. nodeSize Integer Size of the nodes in graph. canvasId String Element id of canvas used to generate graph. color String Color of nodes. Has to be property of CSS (HEX code or color name).","title":"Options"},{"location":"API/#events","text":"After user generates a graph, user can drag the nodes to any position within the canvas. User may add edges between graph nodes by enterring node labels. Note: looping (a node connecting itself) is not supported.","title":"Events"},{"location":"API/#methods","text":"Methods to control a nnGenerator object Name Parameters Description addNode None Increase the size of the graph by adding one node. addEdge Object{v1: integer, v2: integer} Connects nodes v1 and v2 with an edge. removeEdge Object{v1: integer, v2: integer} Remove edge connecting v1 and v2. draw None Draw the generated graph on canvas. select x: float, y: float Point object at position (x, y) by pointer selected . dragUp Event Handles mouse button release. dragOut Event Handles mouse leaving canvas. dragMove Event Handles mouse dragging within canvas. dragDown Event Handles mouse clicking canvas. setDrag None Handles all mouse events (dragUp, dragOut, dragMove, dragDown). getRandomCoor max: Integer Generates a random float from range (0, max). Used to generate nodes at random positions.","title":"Methods"}]}